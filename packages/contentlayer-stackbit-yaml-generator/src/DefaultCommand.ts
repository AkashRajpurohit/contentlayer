import { getConfig } from '@contentlayer/core'
import { recRemoveUndefinedValues } from '@contentlayer/utils'
import { Command, Option } from 'clipanion'
import { promises as fs } from 'fs'
import * as path from 'path'
import * as t from 'typanion'
import { convertSchema } from './convert'
import { toYamlString } from './utils'

const defaultYamlPath = () => `${path.join(process.cwd())}/stackbit.yaml`

export class DefaultCommand extends Command {
  configPath = Option.String('-c,--config', 'contentlayer.config.ts', {
    description: 'Path to the Contentlayer config',
    validator: t.isString(),
  })

  yamlPath = Option.String('-s,--stackbit', defaultYamlPath(), {
    description: 'Target path for Stackbit YAML file',
    validator: t.isString(),
  })

  async execute() {
    try {
      await this.executeSafe()
    } catch (e) {
      console.error(e)
      throw e
    }
  }

  async executeSafe() {
    const config = await getConfig({ configPath: this.configPath, cwd: process.cwd() })
    const schema = await config.source.provideSchema()
    const stackbitConfig = convertSchema(schema)
    recRemoveUndefinedValues(stackbitConfig)

    const yamlContent = `\
# This file is generated by Contentlayer

${toYamlString(stackbitConfig)}
`

    await fs.writeFile(this.yamlPath, yamlContent)
    console.log(`Stackbit config generated to ${this.yamlPath}`)
  }
}
