import { ArtifactsDir } from '@contentlayer/core'
import { OT, pipe, T } from '@contentlayer/utils/effect'
import { fs } from '@contentlayer/utils/node'
import * as path from 'path'

import { BaseCommand } from './_BaseCommand'

export class PostInstallCommand extends BaseCommand {
  static paths = [['postinstall']]

  executeSafe = pipe(
    T.gen(function* ($) {
      // `process.env.INIT_CWD` is set by `yarn` or `npm` during installation
      const cwd = process.env.INIT_CWD ?? process.cwd()
      const artifactsDirPath = yield* $(ArtifactsDir.mkdir({ cwd }))

      yield* $(T.forEachPar_(['data', 'types'], (moduleName) => makeModuleStub({ artifactsDirPath, moduleName })))
    }),
    OT.withSpan('@contentlayer/cli/commands/PostInstallCommand:executeSafe', { attributes: { cwd: process.cwd() } }),
  )
}

const makeModuleStub = ({ artifactsDirPath, moduleName }: { artifactsDirPath: string; moduleName: string }) =>
  T.gen(function* ($) {
    const dirPath = path.join(artifactsDirPath, moduleName)
    const dirExists = yield* $(fs.fileOrDirExists(dirPath))
    if (!dirExists) {
      yield* $(fs.mkdirp(dirPath))
    }

    const dtsFilePath = path.join(dirPath, 'index.d.ts')
    const dtsFileExists = yield* $(fs.fileOrDirExists(dtsFilePath))
    if (!dtsFileExists) {
      yield* $(fs.writeFile(dtsFilePath, moduleStubFile))
    }
  })

const moduleStubFile = `\
// This file is automatically generated by the Contentlayer.
// This is a placeholder until \`contentlayer build\` has been run.

export {}
`
